// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	payload "github.com/erikrios/reog-apps-apis/model/payload"
	mock "github.com/stretchr/testify/mock"
)

// PropertyService is an autogenerated mock type for the PropertyService type
type PropertyService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, groupID, p
func (_m *PropertyService) Create(ctx context.Context, groupID string, p payload.CreateProperty) (string, error) {
	ret := _m.Called(ctx, groupID, p)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, payload.CreateProperty) string); ok {
		r0 = rf(ctx, groupID, p)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, payload.CreateProperty) error); ok {
		r1 = rf(ctx, groupID, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PropertyService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateQRCode provides a mock function with given fields: ctx, id
func (_m *PropertyService) GenerateQRCode(ctx context.Context, id string) ([]byte, error) {
	ret := _m.Called(ctx, id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, p
func (_m *PropertyService) Update(ctx context.Context, id string, p payload.UpdateProperty) error {
	ret := _m.Called(ctx, id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, payload.UpdateProperty) error); ok {
		r0 = rf(ctx, id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
