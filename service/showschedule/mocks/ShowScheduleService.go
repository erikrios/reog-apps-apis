// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	payload "github.com/erikrios/reog-apps-apis/model/payload"
	mock "github.com/stretchr/testify/mock"

	response "github.com/erikrios/reog-apps-apis/model/response"
)

// ShowScheduleService is an autogenerated mock type for the ShowScheduleService type
type ShowScheduleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, p
func (_m *ShowScheduleService) Create(ctx context.Context, p payload.CreateShowSchedule) (string, error) {
	ret := _m.Called(ctx, p)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, payload.CreateShowSchedule) string); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, payload.CreateShowSchedule) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ShowScheduleService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ShowScheduleService) GetAll(ctx context.Context) ([]response.ShowSchedule, error) {
	ret := _m.Called(ctx)

	var r0 []response.ShowSchedule
	if rf, ok := ret.Get(0).(func(context.Context) []response.ShowSchedule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.ShowSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroupID provides a mock function with given fields: ctx, groupID
func (_m *ShowScheduleService) GetByGroupID(ctx context.Context, groupID string) ([]response.ShowSchedule, error) {
	ret := _m.Called(ctx, groupID)

	var r0 []response.ShowSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) []response.ShowSchedule); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.ShowSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ShowScheduleService) GetByID(ctx context.Context, id string) (response.ShowScheduleDetails, error) {
	ret := _m.Called(ctx, id)

	var r0 response.ShowScheduleDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) response.ShowScheduleDetails); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(response.ShowScheduleDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, p
func (_m *ShowScheduleService) Update(ctx context.Context, id string, p payload.UpdateShowSchedule) error {
	ret := _m.Called(ctx, id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, payload.UpdateShowSchedule) error); ok {
		r0 = rf(ctx, id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
