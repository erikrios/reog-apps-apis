// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/erikrios/reog-apps-apis/entity"
	mock "github.com/stretchr/testify/mock"
)

// ShowScheduleRepository is an autogenerated mock type for the ShowScheduleRepository type
type ShowScheduleRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ShowScheduleRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *ShowScheduleRepository) FindAll(ctx context.Context) ([]entity.ShowSchedule, error) {
	ret := _m.Called(ctx)

	var r0 []entity.ShowSchedule
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ShowSchedule); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ShowSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByGroupID provides a mock function with given fields: ctx, groupID
func (_m *ShowScheduleRepository) FindByGroupID(ctx context.Context, groupID string) ([]entity.ShowSchedule, error) {
	ret := _m.Called(ctx, groupID)

	var r0 []entity.ShowSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.ShowSchedule); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ShowSchedule)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ShowScheduleRepository) FindByID(ctx context.Context, id string) (entity.ShowSchedule, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.ShowSchedule
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.ShowSchedule); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.ShowSchedule)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, showSchedule
func (_m *ShowScheduleRepository) Insert(ctx context.Context, showSchedule entity.ShowSchedule) error {
	ret := _m.Called(ctx, showSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ShowSchedule) error); ok {
		r0 = rf(ctx, showSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, showSchedule
func (_m *ShowScheduleRepository) Update(ctx context.Context, id string, showSchedule entity.ShowSchedule) error {
	ret := _m.Called(ctx, id, showSchedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.ShowSchedule) error); ok {
		r0 = rf(ctx, id, showSchedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
