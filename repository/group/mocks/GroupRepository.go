// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/erikrios/reog-apps-apis/entity"

	mock "github.com/stretchr/testify/mock"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *GroupRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *GroupRepository) FindAll(ctx context.Context) ([]entity.Group, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Group
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Group); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *GroupRepository) FindByID(ctx context.Context, id string) (entity.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *GroupRepository) Insert(ctx context.Context, _a1 entity.Group) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Group) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertAll provides a mock function with given fields: ctx, groups
func (_m *GroupRepository) InsertAll(ctx context.Context, groups []entity.Group) error {
	ret := _m.Called(ctx, groups)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Group) error); ok {
		r0 = rf(ctx, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, _a2
func (_m *GroupRepository) Update(ctx context.Context, id string, _a2 entity.Group) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Group) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
