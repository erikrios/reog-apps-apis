basePath: /api/v1
definitions:
  controller.createGroupResponse:
    properties:
      data:
        $ref: '#/definitions/controller.idData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.idData:
    properties:
      id:
        type: string
    type: object
  controller.loginResponse:
    properties:
      data:
        $ref: '#/definitions/controller.tokenData'
        x-order: "2"
      message:
        maxLength: 80
        minLength: 2
        type: string
        x-order: "1"
      status:
        maxLength: 80
        minLength: 2
        type: string
        x-order: "0"
    type: object
  controller.tokenData:
    properties:
      token:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  payload.CreateGroup:
    properties:
      address:
        maxLength: 1000
        minLength: 2
        type: string
        x-order: "2"
      leader:
        maxLength: 80
        minLength: 2
        type: string
        x-order: "1"
      name:
        maxLength: 80
        minLength: 2
        type: string
        x-order: "0"
      villageID:
        maxLength: 20
        minLength: 2
        type: string
        x-order: "3"
    type: object
  payload.Credential:
    properties:
      password:
        maxLength: 50
        minLength: 2
        type: string
        x-order: "1"
      username:
        maxLength: 20
        minLength: 2
        type: string
        x-order: "0"
    type: object
host: localhost
info:
  contact:
    email: erikriosetiawan15@gmail.com
    name: Erik Rio Setiawan
    url: http://www.swagger.io/support
  description: API for Reog Group in Ponorogo
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Reog Apps API
  version: "1.0"
paths:
  /admins:
    post:
      consumes:
      - application/json
      description: Admin login
      parameters:
      - description: admin credentials
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Admin Login
      tags:
      - admins
  /groups:
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: request body
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.CreateGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.createGroupResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a Group
      tags:
      - groups
swagger: "2.0"
